# -*- coding: utf-8 -*-
"""BCI analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eN9c1YsKlAdsPYHtt3SsWtB98fu1cjCi

## Scientific Programming with Python - BCI kit data
PowerMind final project
"""




import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from pandas.api.types import CategoricalDtype
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import classification_report
from matplotlib import pyplot as plt
from sklearn import datasets
from sklearn.tree import DecisionTreeClassifier
from sklearn import tree
from sklearn.datasets import load_iris
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
import plotly.express as px

df = pd.read_csv("../Alfa/Data/test.csv")
df.head()

df.info()

"""## Missing data analysis"""

# percent_missing = df.isnull().sum() * 100 / len(df)
# missing_value_df = pd.DataFrame({
#                                  'percent_missing': percent_missing})
# print(round(missing_value_df))

# missing_value_df.sort_values(by='percent_missing', ascending=False).plot.bar()
# plt.xlabel('features')
# plt.ylabel('correlation')

"""# **Initial Data Analysis**"""

copy_df = df.copy()

Timestamp= df["Timestamp"]
meanAttention= df["Attention"].mean()
meanMeditation= df["Meditation"].mean()
meanTheta= df["Theta"].mean()
meanLowBeta= df["LowBeta"].mean()
# meanHighBeta= df["HighBeta"].mean()

# df["Timestamp"].fillna(meanTimestamp,inplace=True)
df["Attention"].fillna(meanAttention,inplace=True)
df["Meditation"].fillna(meanMeditation,inplace=True)
df["Theta"].fillna(meanTheta,inplace=True)
df["LowBeta"].fillna(meanLowBeta,inplace=True)
# df["HighBeta"].fillna(meanHighBeta,inplace=True)


# delete rows
df.drop('Delta', inplace=True, axis=1)
df.drop('LowAlpha', inplace=True, axis=1)
df.drop('HighAlpha', inplace=True, axis=1)
df.drop('HighBeta', inplace=True, axis=1)
df.drop('LowGamma', inplace=True, axis=1)
df.drop('HighGamma', inplace=True, axis=1)

# Updated the data form
cleaned_df=df
print(df)

print(Timestamp)

import pandas as pd

# Define a Series of timestamps as strings
timestamp_series_str = pd.Series(df["Timestamp"])

# Convert the timestamp Series to a datetime Series
timestamp_series_dt = pd.to_datetime(timestamp_series_str, format='%d-%m-%Y_%H:%M:%S')

# Convert the datetime Series to Unix timestamps in seconds
timestamp_series_sec = timestamp_series_dt.astype(int) // 10**9

# Print the Unix timestamp Series in seconds
print(timestamp_series_sec)

TimeAxis = timestamp_series_sec-timestamp_series_sec[0]
print(TimeAxis)

"""### Ratio between Theta to LowBeta:
**Theta** waves in the front head point slow brain activity, and mental fogginess that causes a lack of concentration.
**Beta (LowBeta)** waves point to cognitive functioning and the ability to concentrate.
The ratio between both features means, will point to the much Theta the patient has ratio to Beta in his front head, during the exams he is performing. 
(If Theta is higher- the patient is most likely to have ADHD).
"""

#calculates ratio

print("Theta mean:",np.mean(cleaned_df['Theta']))
print("LowBeta mean:",np.mean(cleaned_df['LowBeta']))
print("The ratio between Theta and LowBeta is:")
print(np.divide(np.mean(cleaned_df['Theta']),np.mean(cleaned_df['LowBeta'])))
print("Attention mean:",np.mean(cleaned_df['Attention']))

df['Theta-Beta Ratio'] = (cleaned_df['Theta']) / (cleaned_df['LowBeta'])

ratio=np.divide(np.mean(cleaned_df['Theta']),np.mean(cleaned_df['LowBeta']))
# Create the ratio graph
plt.plot(TimeAxis/60,df['Theta-Beta Ratio'], linestyle='-.',linewidth=0.1, marker='o', color='b')

# Add title and axis labels
plt.title(f'Theta/LowBeta = {round(ratio,4)}')
plt.xlabel('Time (min)')
plt.ylabel('Theta/LowBeta')



# Show the graph
plt.show()

"""# **Exploratory Data Analysis**
Each feature analysis
"""

df['AttentionMean']= (cleaned_df['Attention'])
mean= np.mean(cleaned_df['Attention'])
plt.plot(TimeAxis/60,df['AttentionMean'], linestyle='-.',linewidth=0.1, marker='o', color='g')

# Add title and axis labels
plt.title(f'AttentionMean = {round(mean,3)}')
plt.xlabel('Time (min)')
plt.ylabel('Attention')

# Show the graph
plt.show()

df['MeditationMean']= (cleaned_df['Meditation'])
mean= np.mean(cleaned_df['Meditation'])
plt.plot(TimeAxis/60,df['MeditationMean'], linestyle='-.',linewidth=0.1, marker='o', color='c')

# Add title and axis labels
plt.title(f'MeditationMean = {round(mean,3)}')
plt.xlabel('Time (min)')
plt.ylabel('Meditation')

# Show the graph
plt.show()

"""## Feature correlation -HeatMap"""

# def plot_heatmap(df,):
#   plt.subplots(figsize=(20,15))
#   corr_matrix= df.corr()
#   sns.heatmap(corr_matrix, annot=True, cmap='BuGn')
#   return corr_matrix
# plot_heatmap(cleaned_df)

# # Ratio between Attention and Meditation
# plt.subplots(figsize=(15,5))
# sns.scatterplot(x= cleaned_df['Theta'],
#                 y=  cleaned_df['LowBeta'])

# plt.show()